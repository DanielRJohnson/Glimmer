digraph structs {
  node [shape=Mrecord];
  4 [label="<name> Identifier |<f0> Token|{<f1> Value | \"n\"}  "];
  4:f0 -> 4:name;
  5 [label="<name> IntegerLiteral |<f0> Token|{<f1> Value | 20}  "];
  5:f0 -> 5:name;
  6 [label="<name> *ast.IntegerLiteral"];
  6:name -> 5:name;
  3 [label="<name> LetStatement |<f0> Token|<f1> Name|<f2> Value "];
  3:f0 -> 3:name;
  3:f1 -> 4:name;
  3:f2 -> 6:name;
  7 [label="<name> *ast.LetStatement"];
  7:name -> 3:name;
  9 [label="<name> Identifier |<f0> Token|{<f1> Value | \"fib\"}  "];
  9:f0 -> 9:name;
  12 [label="<name> Identifier |<f0> Token|{<f1> Value | \"fibnum\"}  "];
  12:f0 -> 12:name;
  10:<11index0> -> 12:name;
  18 [label="<name> Identifier |<f0> Token|{<f1> Value | \"fibnum\"}  "];
  18:f0 -> 18:name;
  19 [label="<name> *ast.Identifier"];
  19:name -> 18:name;
  20 [label="<name> IntegerLiteral |<f0> Token|{<f1> Value | 0}  "];
  20:f0 -> 20:name;
  21 [label="<name> *ast.IntegerLiteral"];
  21:name -> 20:name;
  17 [label="<name> InfixExpression |<f0> Token|<f1> Left|{<f2> Operator | \"==\"} |<f3> Right "];
  17:f0 -> 17:name;
  17:f1 -> 19:name;
  17:f3 -> 21:name;
  22 [label="<name> *ast.InfixExpression"];
  22:name -> 17:name;
  26 [label="<name> IntegerLiteral |<f0> Token|{<f1> Value | 0}  "];
  26:f0 -> 26:name;
  27 [label="<name> *ast.IntegerLiteral"];
  27:name -> 26:name;
  25 [label="<name> ExpressionStatement |<f0> Token|<f1> Expression "];
  25:f0 -> 25:name;
  25:f1 -> 27:name;
  28 [label="<name> *ast.ExpressionStatement"];
  28:name -> 25:name;
  23:<24index0> -> 28:name;
  23 [label="<name> BlockStatement |<f0> Token|{<f1> Statements | {<24index0> 0}}  "];
  23:f0 -> 23:name;
  33 [label="<name> IntegerLiteral |<f0> Token|{<f1> Value | 1}  "];
  33:f0 -> 33:name;
  34 [label="<name> *ast.IntegerLiteral"];
  34:name -> 33:name;
  32 [label="<name> ExpressionStatement |<f0> Token|<f1> Expression "];
  32:f0 -> 32:name;
  32:f1 -> 34:name;
  35 [label="<name> *ast.ExpressionStatement"];
  35:name -> 32:name;
  30:<31index0> -> 35:name;
  30 [label="<name> BlockStatement |<f0> Token|{<f1> Statements | {<31index0> 0}}  "];
  30:f0 -> 30:name;
  16:<29index0> -> 30:name;
  38 [label="<name> Identifier |<f0> Token|{<f1> Value | \"fibnum\"}  "];
  38:f0 -> 38:name;
  39 [label="<name> *ast.Identifier"];
  39:name -> 38:name;
  40 [label="<name> IntegerLiteral |<f0> Token|{<f1> Value | 1}  "];
  40:f0 -> 40:name;
  41 [label="<name> *ast.IntegerLiteral"];
  41:name -> 40:name;
  37 [label="<name> InfixExpression |<f0> Token|<f1> Left|{<f2> Operator | \"==\"} |<f3> Right "];
  37:f0 -> 37:name;
  37:f1 -> 39:name;
  37:f3 -> 41:name;
  42 [label="<name> *ast.InfixExpression"];
  42:name -> 37:name;
  16:<36index0> -> 42:name;
  48 [label="<name> Identifier |<f0> Token|{<f1> Value | \"fib\"}  "];
  48:f0 -> 48:name;
  49 [label="<name> *ast.Identifier"];
  49:name -> 48:name;
  52 [label="<name> Identifier |<f0> Token|{<f1> Value | \"fibnum\"}  "];
  52:f0 -> 52:name;
  53 [label="<name> *ast.Identifier"];
  53:name -> 52:name;
  54 [label="<name> IntegerLiteral |<f0> Token|{<f1> Value | 1}  "];
  54:f0 -> 54:name;
  55 [label="<name> *ast.IntegerLiteral"];
  55:name -> 54:name;
  51 [label="<name> InfixExpression |<f0> Token|<f1> Left|{<f2> Operator | \"-\"} |<f3> Right "];
  51:f0 -> 51:name;
  51:f1 -> 53:name;
  51:f3 -> 55:name;
  56 [label="<name> *ast.InfixExpression"];
  56:name -> 51:name;
  47:<50index0> -> 56:name;
  47 [label="<name> CallExpression |<f0> Token|<f1> Function|{<f2> Arguments | {<50index0> 0}}  "];
  47:f0 -> 47:name;
  47:f1 -> 49:name;
  57 [label="<name> *ast.CallExpression"];
  57:name -> 47:name;
  59 [label="<name> Identifier |<f0> Token|{<f1> Value | \"fib\"}  "];
  59:f0 -> 59:name;
  60 [label="<name> *ast.Identifier"];
  60:name -> 59:name;
  63 [label="<name> Identifier |<f0> Token|{<f1> Value | \"fibnum\"}  "];
  63:f0 -> 63:name;
  64 [label="<name> *ast.Identifier"];
  64:name -> 63:name;
  65 [label="<name> IntegerLiteral |<f0> Token|{<f1> Value | 2}  "];
  65:f0 -> 65:name;
  66 [label="<name> *ast.IntegerLiteral"];
  66:name -> 65:name;
  62 [label="<name> InfixExpression |<f0> Token|<f1> Left|{<f2> Operator | \"-\"} |<f3> Right "];
  62:f0 -> 62:name;
  62:f1 -> 64:name;
  62:f3 -> 66:name;
  67 [label="<name> *ast.InfixExpression"];
  67:name -> 62:name;
  58:<61index0> -> 67:name;
  58 [label="<name> CallExpression |<f0> Token|<f1> Function|{<f2> Arguments | {<61index0> 0}}  "];
  58:f0 -> 58:name;
  58:f1 -> 60:name;
  68 [label="<name> *ast.CallExpression"];
  68:name -> 58:name;
  46 [label="<name> InfixExpression |<f0> Token|<f1> Left|{<f2> Operator | \"+\"} |<f3> Right "];
  46:f0 -> 46:name;
  46:f1 -> 57:name;
  46:f3 -> 68:name;
  69 [label="<name> *ast.InfixExpression"];
  69:name -> 46:name;
  45 [label="<name> ExpressionStatement |<f0> Token|<f1> Expression "];
  45:f0 -> 45:name;
  45:f1 -> 69:name;
  70 [label="<name> *ast.ExpressionStatement"];
  70:name -> 45:name;
  43:<44index0> -> 70:name;
  43 [label="<name> BlockStatement |<f0> Token|{<f1> Statements | {<44index0> 0}}  "];
  43:f0 -> 43:name;
  16 [label="<name> IfExpression |<f0> Token|<f1> Condition|<f2> TrueBranch|{<f3> ElifBranches | {<29index0> 0}} |{<f4> ElifConditions | {<36index0> 0}} |<f5> FalseBranch "];
  16:f0 -> 16:name;
  16:f1 -> 22:name;
  16:f2 -> 23:name;
  16:f5 -> 43:name;
  71 [label="<name> *ast.IfExpression"];
  71:name -> 16:name;
  15 [label="<name> ExpressionStatement |<f0> Token|<f1> Expression "];
  15:f0 -> 15:name;
  15:f1 -> 71:name;
  72 [label="<name> *ast.ExpressionStatement"];
  72:name -> 15:name;
  13:<14index0> -> 72:name;
  13 [label="<name> BlockStatement |<f0> Token|{<f1> Statements | {<14index0> 0}}  "];
  13:f0 -> 13:name;
  10 [label="<name> FunctionLiteral |<f0> Token|{<f1> Parameters | {<11index0> 0}} |<f2> Body "];
  10:f0 -> 10:name;
  10:f2 -> 13:name;
  73 [label="<name> *ast.FunctionLiteral"];
  73:name -> 10:name;
  8 [label="<name> LetStatement |<f0> Token|<f1> Name|<f2> Value "];
  8:f0 -> 8:name;
  8:f1 -> 9:name;
  8:f2 -> 73:name;
  74 [label="<name> *ast.LetStatement"];
  74:name -> 8:name;
  77 [label="<name> Identifier |<f0> Token|{<f1> Value | \"print\"}  "];
  77:f0 -> 77:name;
  78 [label="<name> *ast.Identifier"];
  78:name -> 77:name;
  81 [label="<name> Identifier |<f0> Token|{<f1> Value | \"fib\"}  "];
  81:f0 -> 81:name;
  82 [label="<name> *ast.Identifier"];
  82:name -> 81:name;
  84 [label="<name> Identifier |<f0> Token|{<f1> Value | \"n\"}  "];
  84:f0 -> 84:name;
  85 [label="<name> *ast.Identifier"];
  85:name -> 84:name;
  80:<83index0> -> 85:name;
  80 [label="<name> CallExpression |<f0> Token|<f1> Function|{<f2> Arguments | {<83index0> 0}}  "];
  80:f0 -> 80:name;
  80:f1 -> 82:name;
  86 [label="<name> *ast.CallExpression"];
  86:name -> 80:name;
  76:<79index0> -> 86:name;
  76 [label="<name> CallExpression |<f0> Token|<f1> Function|{<f2> Arguments | {<79index0> 0}}  "];
  76:f0 -> 76:name;
  76:f1 -> 78:name;
  87 [label="<name> *ast.CallExpression"];
  87:name -> 76:name;
  75 [label="<name> ExpressionStatement |<f0> Token|<f1> Expression "];
  75:f0 -> 75:name;
  75:f1 -> 87:name;
  88 [label="<name> *ast.ExpressionStatement"];
  88:name -> 75:name;
  2:<2index0> -> 7:name;
  2:<2index1> -> 74:name;
  2:<2index2> -> 88:name;
  2 [label="<name> []ast.Statement |<2index0> 0|<2index1> 1|<2index2> 2 "];
  1 [label="<name> Program |<f0> Statements "];
  1:f0 -> 2:name;
  89 [label="<name> *ast.Program"];
  89:name -> 1:name;
}
